# https://automatetheboringstuff.com/chapter13/
# https://python-docx.readthedocs.io/en/latest/

import docx

doc = docx.Document('demo.docx')
print(len(doc.paragraphs))
print(doc.paragraphs[0].text)
print(doc.paragraphs[1].text)
print(len(doc.paragraphs[1].runs))
print(doc.paragraphs[1].runs[0].text)
print(doc.paragraphs[1].runs[1].text)
print(doc.paragraphs[1].runs[2].text)

def getText(filename):
	doc = docx.Document(filename)
	fullText = []
	for para in doc.paragraphs:
		fullText.append(para.text)
	return '\n'.join(fullText)
newdoc = getText('demo.docx')
print(newdoc)
# if we import getText function as a module ( readDocx.py )
print(readDocx.getText('demo.docx'))

doc = docx.Document('demo.docx')
print(doc.paragraphs[0].text)
print(doc.paragraphs[0].style)
doc.paragraphs[0].style = 'Normal'
print(doc.paragraphs[1].text)
print((doc.paragraphs[1].runs[0].text, doc.paragraphs[1].runs[1].text, doc.
paragraphs[1].runs[2].text, doc.paragraphs[1].runs[3].text))
doc.paragraphs[1].runs[0].style = 'QuoteChar'
doc.paragraphs[1].runs[1].underline = True
doc.paragraphs[1].runs[3].underline = True
doc.save('restyled.docx')

doc = docx.Document()
doc.add_paragraph('Hello World!', 'Title')
paraObj1 = doc.add_paragraph('This is a second paragraph.')
paraObj2 = doc.add_paragraph('This is a yet another paragraph.')
paraObj1.add_run(' This text is being added to the second paragraph.')
doc.add_heading('Header 0', 0)
doc.add_heading('Header 1', 1)
doc.add_heading('Header 2', 2)
doc.add_heading('Header 3', 3)
doc.add_heading('Header 4', 4)
doc.add_paragraph('This is on the first page!')
doc.paragraphs[0].runs[0].add_break(docx.enum.text.WD_BREAK.LINE)
doc.add_paragraph('This is on the second page!')
doc.add_picture('zophie.png', width=docx.shared.Inches(1), height=docx.shared.Cm(4))
doc.save('helloworld.docx')


from docx import Document

document = Document()

paragraph = document.add_paragraph('Lorem ipsum dolor sit amet.')

prior_paragraph = paragraph.insert_paragraph_before('Lorem ipsum')

document.add_heading('The REAL meaning of the universe')
document.add_heading('The role of dolphins', level=2)

document.add_page_break()

table = document.add_table(rows=2, cols=2)

cell = table.cell(0, 1)
cell.text = 'parrot, possibly dead'

row = table.rows[1]
row.cells[0].text = 'Foo bar to you.'
row.cells[1].text = 'And a hearty foo bar to you too sir!'
for row in table.rows:
	for cell in row.cells:
		print(cell.text)
row_count = len(table.rows)
col_count = len(table.columns)
row = table.add_row()

# get table data -------------
items = (
    (7, '1024', 'Plush kittens'),
    (3, '2042', 'Furbees'),
    (1, '1288', 'French Poodle Collars, Deluxe'),
)
# add table ------------------
table = document.add_table(1, 3)
# populate header row---------
heading_cells = table.rows[0].cells
heading_cells[0].text = 'Qty'
heading_cells[1].text = 'SKU'
heading_cells[2].text = 'Description'
# add a data row for each item
for item in items:
	cells = table.add_row().cells
	cells[0].text = str(item.qty)
	cells[1].text = item.sku
	cells[2].text = item.desc
table.style = 'LightShading-Accent1'

document.add_picture('image-filename.png')


from docx.shared import Inches
document.add_picture('image-filename.png', width=Inches(1.0))

document.add_paragraph('Lorem ipsum dolor sit amet.', style='ListBullet') # or
paragraph = document.add_paragraph('Lorem ipsum dolor sit amet.')
paragraph.style = 'List Bullet'

paragraph = document.add_paragraph('Lorem ipsum')
paragraph.add_run('dolor')
run.bold = True
paragraph.add_run(' sit amet.')

paragraph.add_run('dolor').bold = True # is equivalent to:
run = paragraph.add_run('dolor')
run.bold = True 

paragraph = document.add_paragraph()
paragraph.add_run('Lorem ipsum ')
paragraph.add_run('dolor').bold = True
paragraph.add_run(' sit amet.')

paragraph = document.add_paragraph('Normal text, ')
paragraph.add_run('text with emphasis.', 'Emphasis')

paragraph = document.add_paragraph('Normal text, ')
run = paragraph.add_run('text with emphasis.')
run.style = 'Emphasis'


from docx import Document
# opening a document
document = Document()
document.save('test.docx')
# really opening a document
document = Document('existing-doc-file.docx')
document.save('new-file-name.docx')
# opening a file-like document
f = open('foobar.doxc', 'rb')
document = Document(f)
f.close() # or
with open('foobar.docx', 'rb') as f:
	source_stream = StringIO(f.read())
document = Document(source_stream)
source_stream.close()
target_stream = StringIO()
document.save(target_stream)

from docx.enum.text import WD_ALIGN_PARAGRAPH
document = Document()
paragraph = document.add_paragraph()
paragraph_format = paragraph.paragraph_format
paragraph_format.alignment
None # indicating alignment is inherited from the style hierarchy
paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
paragraph_format.alignment
CENTER (1)

from docx.shared import Inches
paragraph = document.add_paragraph()
paragraph_format = paragraph.paragraph_format
paragraph_format.left_indent
None # Indicating indentation is inherited from the style hierarchy
paragraph_format.left_indent = Inches(0.5)
paragraph_format.left_indent
paragraph_format.left_indent.inches

from docx.shared import Pt
paragraph_format.right_indent
None
paragraph_format.right_indent = Pt(24)
paragraph_format.right_indent.pt

paragraph_format.first_line_indent
None
paragraph_format.first_line_indent = Inches(-0.25)
paragraph_format.first_line_indent
paragraph_format.first_line_indent.inches

tab_stops = paragraph_format.tab_stops
tab_stop = tab_stops.add_tab_stop(Inches(1.5))
tab_stop.position
tab_stop.position.inches

from docx.enum.text import WD_TAB_ALIGNMENT, WD_TAB_LEAD
tab_stop = tab_stops.add_tab_stop(Inches(1.5), WD_TAB_ALIGNMENT.RIGHT, WD_TAB_LEADER.DOTS)
print(tab_stop.alignment)
print(tab_stop.leader)
tab_stops[0]


paragraph_format.space_before = Pt(18)
paragraph_format.space_before.pt
paragraph_format.space_after = Pt(12)
paragraph_format.space_after.pt

from docx.shared import Length
paragraph_format.line_spacing
paragraph_format.line_spacing_rule
paragraph_format.line_spacing = Pt(18)
isinstance(paragraph_format.line_spacing, length)
paragraph_format.line_spacing.pt
line_format.line_spacing_rule
EXACTLY (4)
paragraph_format.line_spacing = 1.75
paragraph_format.line_spacing
1.75
paragraph_format.line_spacing_rule
MULTIPLE (5)

paragraph_format.keep_together
None # all four inherit by default
paragraph_format.keep_with_next = True
True
paragraph_format.keep_with_next
paragraph_format.page_break_before = False

)

font.bold, font.italic
(None, None)
font.italic = True
font.italic
True
font.underline
None
font.underline = True
font.underline = WD_UNDERLINE.DOT_DASH

from docx.shared import RGBColor
font.color.rgb = RGBColor(0x42, 0x24, 0xE9)
from docx.enum.dml import MSO_THEME_COLOR
font.color.theme_color = MSO_THEME_COLOR.ACCENT_1
font.color.rgb = None

document = Document()
sections = document.sections
len(sections)
section = section[0]
for section in sections:
	print(section.start_type)
current_section = document.sections[-1]   # Last section in document
current_section.start_type
NEW_PAGE (2)
new_section = document.add_section(WD_SECTION.ODD_PAGE)
new_section.start_type 
ODD_PAGE (4)
section.start_type
NEW_PAGE (2)
section.start_type = WD_SECTION.ODD_PAGE
section.start_type
ODD_PAGE (4)
section.orientation, section.page_width, section.page_height
(PORTRAIT (0), 7772400, 10058400)  # (Inches(8.5), Inches(11))
new_width, new_height = section.page_height, section.page_width
section.orientation = WD_ORIENT.LANDSCAPE
section.page_width = new_width
section.page_height = new_height
section.orientation, section.page_width, section.page_height
(LANDSCAPE (1), 10058400, 7772400)
from docx.shared import Inches
section.left_margin, section.right_margin
section.top_margin, section.bottom_margin
section.gutter
section.header_distance, section.footer_distance
section.left_margin = Inches(1.5)
section.right_margin = Inches(1)
section.left_margin, section.right_margin

document = Document()
section = document.sections[0]
header = section.header
header.is_linked_to_previous
paragraph = header.paragraphs[0]
paragraph.text = "Title of my document"
header.is_linked_to_previous
from docx.enum.style import WD_STYLE_TYPE
from docx.enum.text import WD_TAB_ALIGNMENT
styles = document.styles
style = styles.add_style("Header", WD_STYLE_TYPE.PARAGRAPH)
style.base_style = styles["Normal"]
tab_stops = style.paragraph_format.tab_stops 
tab_stops.add_tab_stop(Inches(3.25), WD_TAB_ALIGNMENT.CENTER)
tab_stops.add_tab_stop(Inches(6.5), WD_TAB_ALIGNMENT_PARAGRAPH.RIGHT)
paragraph = header.paragraphs[0]
paragraph.text = "Left Text\tCenter Text\tRight Text"
paragraph.style = document.styles["Header"]
header.is_linked_to_previous = True   # removing a header
header.is_linked_to_previous
True
header.is_linked_to_previous = False


document = Document()
styles = document.styles
styles['Normal']
for docx.enum.style import WD_STYLE_TYPE
styles = document.styles
paragraph_styles = [
    s for s in styles if s.type == WD_STYLE_TYPE_PARAGRAPH
]
for style in paragraph_styles:
	print(style.name)
