# https://selenium-python.readthedocs.io/getting-started.html

from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Firefox()
driver.get("http://www.python.org")
assert "Python" in driver.title
elem = driver.find_element_by_name("q")
elem.clear()
elem.send_keys("pycon")
elem.send_keys(Keys.RETURN)
assert "No result found." not in driver.page_source
 driver.close()


# Test case
import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
class PythonOrgSearch(unittest.TestCase):
	def setUp(self):
		self.driver = webdriver.Firefox()
	def test_search_in_python_org(self):
		driver = self.driver
		driver.get("http://www.python.org")
		self.assertIn("Python", driver.title)
		elem = driver.find_element_by_name("q")
		elem.send_keys("pycon")
		elem.send_keys(Keys.RETURN)
		assert "No results found." not in driver.page_source
	def tearDown(self):
		self.driver.close()
if __name__=="__main__":
	unittest.main()
	

# NAVIGATION
<input type="text" name="passwd" id="passwd-id" />
driver = webdriver.Firefox()
driver.get("http://www.google.com")
element = driver.find_element_by_id("passwd-id")
element = driver.find_element_by_name("passwd")
element = driver.find_element_by_xpath("//input[@id='passwd-id']")
element.send_keys("some text")
element.send_keys(" and some", Keys.ARROW_DOWN)
element.clear()

element = driver.find_element_by_xpath("//select[@name='name']")
all_options = element.find_elements_by_tag_name("option")
for option in all_options:
	print(f'Value is{option.get_attribute("value")}')
	option.click()

from selenium.webdriver.support.ui import Select
select = Select(driver.find_element_by_name('name'))
select.select_by_index(index)
select.select_by_visible_text("text")
select.select_by_value(value)
select = Select(driver.find_element_by_id('id'))
select.deselect_all()
select = Select(driver.find_element_by_xpath("//select[@name='name']"))
all_selected_options = select.all_selected_options
options = select.options
driver.find_element_by_id("submit").click()
element.submit()

element = driver.find_element_by_name("source")
target = driver.find_element_by_name("target")
from selenium.webdriver import ActionChains
action_chains = ActionChains(driver)
action_chains.drag_and_drop(element, target).perform()

driver.switch_to_window("windowName")
<a href="somewhere.html" target="windowName">Click here to open a new window</a>
for handle in driver.window_handles:
	driver.switch_to_window(handle)
driver.switch_to_frame("frameName")

driver.switch_to_frame("frameName.0.child")
driver.switch_to_default_content()
alert = driver.switch_to_alert()

driver.get("http://www.example.com")
driver.forward()
driver.back()
cookie = {'name' : 'foo', 'value' : 'bar'}
driver.add_cookie(cookie)
driver.get_cookies()

# https://docs.seleniumhq.org/docs/03_webdriver.jsp
<a href="http://www.google.com/search?q=cheese">cheese</a>>
cheese = browser.find_element_by_link_text("cheese")
<a href="http://www.google.com/search?q=cheese">search for cheese</a>>
cheese = driver.find_element_by_partial_link_text("cheese")

# https://selenium-python.readthedocs.io/locating-elements.html

# WAITS
https://selenium-python.readthedocs.io/waits.html
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.iu import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
driver = webdriver.Firefox()
driver.get("http://somedomain/url_that_delays_loading")
try:
	element = WebDriver(driver, 10).until(
	    EC.presence_of_elements_located((By.ID, "myDynamicElement"))
	)
finally:
	driver.quit()
	
from selenium.webdriver.support import expected_conditions as EC
wait = WebDriverWait(driver, 10)
element = wait.until(EC.element_to_be_clickable(By.ID, 'someid'))

# Custom Wait Conditions
class element_has_css_class(object):
	"""An expectation for checking that an element has a particular css class.

  locator - used to find the element
  returns the WebElement once it has the particular css class
  """
    def __init__(self, locator, css_class):
	    self.locator = locator
	    self.css_class = css_class
    def __call__(self, driver):
		element = driver.find_element(*self.locator)   # finding the referenced locator
		if self.css_class in element.get_attribute("class"):
			return element
		else:
			return False
			
# Wait until an element with id='myNewInput' has class 'myCSSClass'
wait = WebDriverWait(driver, 10)
element = wait.until(element_has_css_class((By.ID, 'myNewInput'), "myCSSClass"))

from selenium import webdriver 
driver = webdriver.Firefox()
driver.implicitly_wait(10) 
driver.get("http://somedomain/url_that_delays_loading")
myDynamicElement = driver.find_element_by_id("myDynamicElement")


# PAGE OBJECTS
import unittest 
from selenium import webdriver
import page 

class PythonOrgSearch(unittest.TestCase):
	"""A sample test class to show how page object works."""
	def setUp(self):
		self.driver = webdriver.Firefox()
		self.driver.get("http://www.python.org")
	def test_search_in_python_org(self):
		 """
        Tests python.org search feature. Searches for the word "pycon" then verified that some results show up.
        Note that it does not look for any particular text in search results page. This test verifies that
        the results were not empty.
        """
		#Load the main page. In this case the home page of Python.org.
		main_page = page.MainPage(self.driver)
		# Checks if the word "Python" is in title
        assert main_page.is_title_matches(), "python.org title doesn't matchs"
        # Sets the text of search textbook to "pycon"
        main_page.search_text_element = "pycon"	
        main_page.click_go_button()
        search_results_page = page.SearchResultsPage(self.driver)
        # Verifies that the results page is not empty
        assert search_results_page.is_results_found(), "No results found"	
    def tearDown(self):
		self.driver.close()
if __name__ == "__main__":
	unittest.main()
	

from element import BasePageElement
from locators import MainPageLocators
class SearchTextElement(BasePageElement):
	"""This class gets the search text from the specified locator"""
	# The locator for search box where search string is entered
	locator = 'q'
class BasePage(object):
	"""Base class to initialize the base page that will be called from all pages"""
	def __init__(self, driver):
		self.driver = driver
class MainPage(BasePage):
	"""Home page action methods come here. I.e. Python.org"""
	# Declares a variable that will contain the retrieved text
	search_text_element = SearchTextElement()
	def is_title_matches(self):
		"""Verifies that the hardcoded text "Python" appears in page title"""
		return "Python" in self.driver.title
	def click_go_button(self):
		"""Triggers the search"""
		element = self.driver.find_element(*MainPageLocators.GO_BUTTON)
		element.click()
class SearchResultsPage(BasePage):
	"""Search results page action methods come here"""
	def is_results_found(self):
		# Probably should search for this text in the specific page
        # element, but as for now it works fine
		return "No results found." not in self.driver.page_source
		

from selenium.webdriver.support.ui import WebDriverWait
class BasePageElement(object):
	"""Base page class that is initialized on every page object class."""
	def __set__(self, obj, value):
		"""Sets the text to the value supplied"""
		driver = obj.driver
		WebDriverWait(driver, 100).until(
            lambda driver: driver.find_element_by_name(self.locator()))
		driver.find_element_by_name(self.locator).clear()
		driver.find_element_by_name(self.locator).send_keys(value)
	def __get__(self, obj, owner):
		"""Gets the text of the specified object"""
		driver = obj.driver
		WebDriverWait(driver, 100).until(
		    lambda driver: driver.find_element_by_name(self.locator))
		element = driver.find_element_by_name(self.locator)
		return element.get_attribute("value")
		

from selenium.webdriver.common.by import By
class MainPageLocators(object):
	"""A class for main page locators. All main page locators should come here"""
	GO_BUTTON = (By.ID, 'submit')
class SearchResultsPageLocators(object):
	"""A class for search results locators. All search results locators should come here"""
	pass
		

# WEB DRIVER API
https://selenium-python.readthedocs.io/api.html	
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

# examples
from selenium import webdriver
browser = webdriver.Firefox()
print(type(browser))
browser.get('http://inventwithpython.com')
try:
	elem = browser.find_element_by_class_name('nav-item')
	print(f'Found {elem.tag_name} element with that class name!' )
except:
	print('Was not able to find an element with that name.')

	
# sel2.py - Takes your email and password to log-in to your yahoo email.	
from selenium import webdriver
import time
def my_func(take_em, take_pw):
    browser = webdriver.Firefox()
    browser.get('https://mail.yahoo.com')
    emailElem = browser.find_element_by_id('login-username')
    emailElem.send_keys(take_em)
    emailElem.submit()
    time.sleep(5)
    passwordElem = browser.find_element_by_id('login-passwd')
    passwordElem.send_keys(take_pw)
    button_login = browser.find_elements_by_id('login-signin')[0]
    button_login.click()
    
def test_it(*args):
	my_func(*args)
	
if __name__ == '__main__':
	email = input("Please add your email: ")
	passw = input("Please add your password: ")
	test_it(email, passw)
	
# scroll the page
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
browser = webdriver.Firefox()
browser.get('http://www.b92.net')
htmlElem = browser.find_element_by_tag_name('html')
htmlElem.send_keys(Keys.END)    # scrolls to bottom
htmlElem.send_keys(Keys.HOME)   # scrolls to top


# Yahoo search
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
browser = webdriver.Firefox()
browser.get('http://www.yahoo.com')
assert 'Yahoo' in browser.title
elem = browser.find_element_by_name('p')  # Find the search box
elem.send_keys('seleniumhq' + Keys.RETURN)
browser.quit()


# HEADLESS browser
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
import time
 #--| Setup
options = Options()
options.add_argument("--headless")
caps = webdriver.DesiredCapabilities().FIREFOX
caps["marionette"] = True
browser = webdriver.Firefox(firefox_options=options, capabilities=caps, executable_path=r"geckodriver.exe")
#--| Parse
browser.get('https://duckduckgo.com')
logo = browser.find_elements_by_css_selector('#logo_homepage_link')
print(logo[0].text)


# https://docs.seleniumhq.org/docs/03_webdriver.jsp
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
# Create a new instance of the Firefox driver
driver = webdriver.Firefox()
# go to the google home page
driver.get("http://www.google.com")
# the page is ajaxy so the title is originally this:
print(driver.title) 
inputElement = driver.find_element_by_name("q")
# type in the search
inputElement.send_keys("cheese!")
# submit the form ( although gogle automatically searches now without submitting)
inputElement.submit()
try:
	# We have to wait for the page to refresh, the last thing that seems to be updated is the title
	WebDriverWait(driver, 10).until(EC.title_contains("cheese!"))
	# You should see "cheese! - Google Seach"
	print(driver.title)
finally:
	driver.quit()
